# Multi-stage build - Frontend first
FROM node:18-alpine AS frontend-builder

WORKDIR /app

# Copy package files first for better caching
COPY ./frontend/package*.json ./

# Install dependencies
RUN npm ci

# Copy the rest of the frontend files
COPY ./frontend/ ./

# Debug: List directory contents
RUN echo "=== Directory contents ===" && ls -la && \
    echo "=== Public directory ===" && (ls -la public/ || echo "public/ not found") && \
    echo "=== Src directory ===" && (ls -la src/ || echo "src/ not found") && \
    echo "=== Src/lib directory ===" && (ls -la src/lib/ || echo "src/lib/ not found")

# Create public directory and index.html if missing
RUN mkdir -p public && \
    if [ ! -f public/index.html ]; then \
        echo '<!DOCTYPE html>\n<html lang="en">\n<head>\n  <meta charset="utf-8" />\n  <meta name="viewport" content="width=device-width, initial-scale=1" />\n  <meta name="theme-color" content="#000000" />\n  <meta name="description" content="Cowans Office Supplies Dashboard" />\n  <title>Cowans Office Supplies</title>\n</head>\n<body>\n  <noscript>You need to enable JavaScript to run this app.</noscript>\n  <div id="root"></div>\n</body>\n</html>' > public/index.html; \
        echo "WARNING: Created public/index.html as it was missing"; \
    fi

# Create lib directory and utils.ts if missing
RUN mkdir -p src/lib && \
    if [ ! -f src/lib/utils.ts ]; then \
        echo 'import { type ClassValue, clsx } from "clsx";\nimport { twMerge } from "tailwind-merge";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}' > src/lib/utils.ts; \
        echo "WARNING: Created src/lib/utils.ts as it was missing"; \
    fi

# Verify files exist
RUN test -f src/index.tsx || (echo "ERROR: src/index.tsx is missing!" && ls -la src/ && exit 1)
RUN test -f src/lib/utils.ts || (echo "ERROR: src/lib/utils.ts is missing!" && ls -la src/lib/ && exit 1)

# Build frontend
ARG REACT_APP_API_URL=/api
ENV REACT_APP_API_URL=$REACT_APP_API_URL
ENV NODE_ENV=production

# Try build with Docker-specific config
RUN npm run build:docker

# Backend stage
FROM python:3.11-slim

# Set working directory
WORKDIR /app

# Install system dependencies including gunicorn
RUN apt-get update && apt-get install -y \
    gcc \
    curl \
    libpq-dev \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements first for better caching
COPY ./web_dashboard/backend/requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Install gunicorn for production
RUN pip install --no-cache-dir gunicorn[gevent]

# Copy application code
COPY ./web_dashboard/backend .

# Copy scripts directory
COPY ./scripts /app/scripts

# Copy frontend build from builder stage
COPY --from=frontend-builder /app/build /app/frontend/build

# Create a non-root user first
RUN useradd -m -u 1000 appuser

# Create necessary directories with proper ownership
RUN mkdir -p /app/data /app/data/generated_icons /app/icons /app/logs /app/backups && \
    chown -R appuser:appuser /app

# Switch to non-root user
USER appuser

# Create production entrypoint
RUN echo '#!/bin/sh\n\
# Ensure all required directories exist with proper permissions\n\
mkdir -p /app/data/generated_icons /app/logs /app/icons\n\
\n\
# Check if we are in production mode\n\
if [ "$FLASK_ENV" = "production" ]; then\n\
    echo "Starting in production mode with Gunicorn..."\n\
    exec gunicorn --bind 0.0.0.0:3560 \\\n\
        --workers 4 \\\n\
        --worker-class gevent \\\n\
        --worker-connections 1000 \\\n\
        --timeout 120 \\\n\
        --keep-alive 5 \\\n\
        --max-requests 1000 \\\n\
        --max-requests-jitter 100 \\\n\
        --access-logfile - \\\n\
        --error-logfile - \\\n\
        --capture-output \\\n\
        app:app\n\
else\n\
    echo "Starting in development mode..."\n\
    exec python app.py\n\
fi' > /app/entrypoint.sh && \
    chmod +x /app/entrypoint.sh

# Expose port
EXPOSE 3560

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:3560/health || exit 1

# Set entrypoint
ENTRYPOINT ["/app/entrypoint.sh"]