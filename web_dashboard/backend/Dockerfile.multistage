# Multi-stage build - Frontend first
FROM node:18-alpine AS frontend-builder

WORKDIR /app

# Copy frontend files
COPY ./frontend/package*.json ./
RUN npm ci

COPY ./frontend .

# Ensure required directories and files exist
RUN mkdir -p src/lib public

# Create utils.ts if it doesn't exist (fallback)
RUN if [ ! -f "src/lib/utils.ts" ]; then \
    echo 'import { type ClassValue, clsx } from "clsx"; \
import { twMerge } from "tailwind-merge"; \
\
export function cn(...inputs: ClassValue[]) { \
  return twMerge(clsx(inputs)); \
}' > src/lib/utils.ts; \
    echo "WARNING: Created src/lib/utils.ts as it was missing"; \
    fi

# Ensure index.html exists
RUN if [ ! -f "public/index.html" ]; then \
    echo "ERROR: public/index.html is missing!"; \
    ls -la public/ || echo "public directory contents not found"; \
    exit 1; \
    fi

# Debug: Show webpack config and file structure
RUN echo "=== Webpack config ===" && \
    cat webpack.config.js | grep -A2 -B2 "template:" && \
    echo "=== Current directory ===" && \
    pwd && \
    echo "=== Directory structure ===" && \
    ls -la && \
    echo "=== Public directory ===" && \
    ls -la public/

# Build frontend
ARG REACT_APP_API_URL=/api
ENV REACT_APP_API_URL=$REACT_APP_API_URL
ENV NODE_ENV=production

# Try build with Docker-specific config
RUN npm run build:docker

# Backend stage
FROM python:3.11-slim

# Set working directory
WORKDIR /app

# Install system dependencies including gunicorn
RUN apt-get update && apt-get install -y \
    gcc \
    curl \
    libpq-dev \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements first for better caching
COPY ./web_dashboard/backend/requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Install gunicorn for production
RUN pip install --no-cache-dir gunicorn[gevent]

# Copy application code
COPY ./web_dashboard/backend .

# Copy scripts directory
COPY ./scripts /app/scripts

# Copy frontend build from builder stage
COPY --from=frontend-builder /app/build /app/frontend/build

# Create a non-root user first
RUN useradd -m -u 1000 appuser

# Create necessary directories with proper ownership
RUN mkdir -p /app/data /app/data/generated_icons /app/icons /app/logs /app/backups && \
    chown -R appuser:appuser /app

# Switch to non-root user
USER appuser

# Create production entrypoint
RUN echo '#!/bin/sh\n\
# Ensure all required directories exist with proper permissions\n\
mkdir -p /app/data/generated_icons /app/logs /app/icons\n\
\n\
# Check if we are in production mode\n\
if [ "$FLASK_ENV" = "production" ]; then\n\
    echo "Starting in production mode with Gunicorn..."\n\
    exec gunicorn --bind 0.0.0.0:3560 \\\n\
        --workers 4 \\\n\
        --worker-class gevent \\\n\
        --worker-connections 1000 \\\n\
        --timeout 120 \\\n\
        --keep-alive 5 \\\n\
        --max-requests 1000 \\\n\
        --max-requests-jitter 100 \\\n\
        --access-logfile - \\\n\
        --error-logfile - \\\n\
        --capture-output \\\n\
        app:app\n\
else\n\
    echo "Starting in development mode..."\n\
    exec python app.py\n\
fi' > /app/entrypoint.sh && \
    chmod +x /app/entrypoint.sh

# Expose port
EXPOSE 3560

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:3560/health || exit 1

# Set entrypoint
ENTRYPOINT ["/app/entrypoint.sh"]