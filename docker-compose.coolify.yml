version: '3.8'

# Backend-first approach - backend serves both API and frontend
# Frontend service was causing "no available server" in Traefik

services:
  backend:
    build:
      context: .
      dockerfile: ./web_dashboard/backend/Dockerfile.prod
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=${DATABASE_URL:-postgresql+psycopg://postgres.gqozcvqgsjaagnnjukmo:fotMat-gomqih-8cybne@aws-0-us-west-1.pooler.supabase.com:6543/postgres}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - SUPABASE_USE_POOLER=true
      - REDIS_URL=redis://redis:6379/0
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - SHOPIFY_SHOP_URL=${SHOPIFY_SHOP_URL}
      - SHOPIFY_ACCESS_TOKEN=${SHOPIFY_ACCESS_TOKEN}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - FTP_HOST=${FTP_HOST}
      - FTP_USERNAME=${FTP_USERNAME}
      - FTP_PASSWORD=${FTP_PASSWORD}
      - PYTHONUNBUFFERED=1
      # Performance tuning for small server
      - GUNICORN_WORKERS=1
      - GUNICORN_WORKER_CONNECTIONS=50
      - GUNICORN_THREADS=2
      - MEMORY_MONITOR_ENABLED=false
    volumes:
      - backend-data:/app/data
      - shared-icons:/app/icons
    expose:
      - "3560"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3560/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    labels:
      - "coolify.managed=true"
      - "coolify.type=application"
      # Fix for Traefik labels - use explicit domain
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`cowans.apps.iaminawe.net`) && PathPrefix(`/api`)"
      - "traefik.http.routers.backend.entrypoints=web,websecure"
      - "traefik.http.routers.backend.tls=true"
      - "traefik.http.routers.backend.tls.certresolver=letsencrypt"
      - "traefik.http.services.backend.loadbalancer.server.port=3560"
      # Frontend routing
      - "traefik.http.routers.frontend.rule=Host(`cowans.apps.iaminawe.net`)"
      - "traefik.http.routers.frontend.entrypoints=web,websecure"
      - "traefik.http.routers.frontend.tls=true"
      - "traefik.http.routers.frontend.tls.certresolver=letsencrypt"
      - "traefik.http.services.frontend.loadbalancer.server.port=3560"
    # Resource limits for 2CPU/4GB server - optimized for operations
    deploy:
      resources:
        limits:
          cpus: '0.5'  # Less CPU for web (few users)
          memory: 768M  # Less memory for web
        reservations:
          cpus: '0.3'
          memory: 512M

  redis:
    image: redis:7-alpine
    volumes:
      - redis-data:/data
    expose:
      - "6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    labels:
      - "coolify.managed=true"
      - "coolify.type=database"
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M
    # Redis memory policy for small servers
    command: redis-server --maxmemory 200mb --maxmemory-policy allkeys-lru

  celery:
    build:
      context: .
      dockerfile: ./web_dashboard/backend/Dockerfile.prod
    command: celery -A celery_app worker --loglevel=info --concurrency=4 --max-tasks-per-child=100 -Q sync,generation,batch,import,download,processing,upload,maintenance
    environment:
      - DATABASE_URL=${DATABASE_URL:-postgresql+psycopg://postgres.gqozcvqgsjaagnnjukmo:fotMat-gomqih-8cybne@aws-0-us-west-1.pooler.supabase.com:6543/postgres}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - SUPABASE_USE_POOLER=true
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - SHOPIFY_SHOP_URL=${SHOPIFY_SHOP_URL}
      - SHOPIFY_ACCESS_TOKEN=${SHOPIFY_ACCESS_TOKEN}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - FTP_HOST=${FTP_HOST}
      - FTP_USERNAME=${FTP_USERNAME}
      - FTP_PASSWORD=${FTP_PASSWORD}
      - MEMORY_MONITOR_ENABLED=false
    volumes:
      - backend-data:/app/data
      - shared-icons:/app/icons
    depends_on:
      - backend
      - redis
    restart: unless-stopped
    labels:
      - "coolify.managed=true"
      - "coolify.type=worker"
    # Resource limits - optimized for heavy operations
    deploy:
      resources:
        limits:
          cpus: '1.2'  # More CPU for operations
          memory: 2G    # More memory for operations
        reservations:
          cpus: '0.8'
          memory: 1G

volumes:
  backend-data:
    driver: local
  shared-icons:
    driver: local
  redis-data:
    driver: local