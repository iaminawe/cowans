version: '3.8'

# Coolify v4 optimized configuration
# This compose file is specifically designed for Coolify deployment

services:
  backend:
    build:
      context: ./web_dashboard/backend
      dockerfile: Dockerfile
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=sqlite:////app/data/database.db
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - SHOPIFY_SHOP_URL=${SHOPIFY_SHOP_URL}
      - SHOPIFY_ACCESS_TOKEN=${SHOPIFY_ACCESS_TOKEN}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - FTP_HOST=${FTP_HOST}
      - FTP_USERNAME=${FTP_USERNAME}
      - FTP_PASSWORD=${FTP_PASSWORD}
      - PYTHONUNBUFFERED=1
    volumes:
      - backend-data:/app/data
      - shared-icons:/app/icons
    expose:
      - "3560"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3560/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    labels:
      - "coolify.managed=true"
      - "coolify.type=application"

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - REACT_APP_API_URL=/api
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=/api
    expose:
      - "80"
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    labels:
      - "coolify.managed=true"
      - "coolify.type=application"

  nginx:
    image: nginx:alpine
    ports:
      - "${PORT:-8888}:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - shared-icons:/usr/share/nginx/html/icons:ro
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    labels:
      - "coolify.managed=true"
      - "coolify.type=proxy"
      - "coolify.domains=${COOLIFY_URL}"

  redis:
    image: redis:7-alpine
    volumes:
      - redis-data:/data
    expose:
      - "6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    labels:
      - "coolify.managed=true"
      - "coolify.type=database"

  celery:
    build:
      context: ./web_dashboard/backend
      dockerfile: Dockerfile
    command: celery -A celery_app worker --loglevel=info
    environment:
      - DATABASE_URL=sqlite:////app/data/database.db
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - SHOPIFY_SHOP_URL=${SHOPIFY_SHOP_URL}
      - SHOPIFY_ACCESS_TOKEN=${SHOPIFY_ACCESS_TOKEN}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    volumes:
      - backend-data:/app/data
      - shared-icons:/app/icons
    depends_on:
      - backend
      - redis
    restart: unless-stopped
    labels:
      - "coolify.managed=true"
      - "coolify.type=worker"

volumes:
  backend-data:
    driver: local
  shared-icons:
    driver: local
  redis-data:
    driver: local